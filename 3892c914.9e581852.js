(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{59:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(2),i=(a(0),a(77)),s=a(79);const r={title:"Basics"},o={unversionedId:"tutorials/todo-app/1-crud",id:"tutorials/todo-app/1-crud",isDocsHomePage:!1,title:"Basics",description:"Very first step on our journey is to create a Wasp project.",source:"@site/docs/tutorials/todo-app/1-crud.md",slug:"/tutorials/todo-app/1-crud",permalink:"/docs/tutorials/todo-app/1-crud",editUrl:"https://github.com/wasp-lang/web/edit/master/docs/tutorials/todo-app/1-crud.md",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/tutorials/todo-app"},next:{title:"Dependencies and Auth",permalink:"/docs/tutorials/todo-app/2-dependencies-and-auth"}},c=[{value:"New Wasp project",id:"new-wasp-project",children:[{value:"Taking a closer look at the code",id:"taking-a-closer-look-at-the-code",children:[]}]},{value:"Task Entity",id:"task-entity",children:[]},{value:"Listing tasks",id:"listing-tasks",children:[{value:"Introducing operations (queries and actions)",id:"introducing-operations-queries-and-actions",children:[]},{value:"Wasp query",id:"wasp-query",children:[]},{value:"Using query in React",id:"using-query-in-react",children:[]}]},{value:"Creating new tasks",id:"creating-new-tasks",children:[{value:"Wasp action",id:"wasp-action",children:[]},{value:"React form",id:"react-form",children:[]},{value:"Side note: Automatic invalidation/updating of queries",id:"side-note-automatic-invalidationupdating-of-queries",children:[]}]},{value:"Updating tasks",id:"updating-tasks",children:[]},{value:"Summary",id:"summary",children:[]}],p={rightToc:c};function l({components:e,...t}){return Object(i.b)("wrapper",Object(n.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Very first step on our journey is to create a Wasp project."),Object(i.b)("h2",{id:"new-wasp-project"},"New Wasp project"),Object(i.b)("p",null,"Run"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),"$ wasp new TodoApp\nCreated new Wasp project in ./TodoApp directory!\n")),Object(i.b)("p",null,"to create new Wasp project, and then run"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),"$ cd TodoApp\n$ wasp start\n")),Object(i.b)("p",null,"to run our project in the development mode."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"wasp start")," might take a little bit longer, due to the first time setup."))),Object(i.b)("p",null,"That is it!",Object(i.b)("br",{parentName:"p"}),"\n",'You will be seeing a lot of different output from client, server and database setting themselves up.\nOnce ready, a new tab should open in your browser, at localhost:3000, a white page saying "Hello world!".'),Object(i.b)("img",{alt:"Todo App - Hello World",src:Object(s.a)("img/todo-app-hello-world.png"),style:{border:"1px solid black"}}),Object(i.b)("h3",{id:"taking-a-closer-look-at-the-code"},"Taking a closer look at the code"),Object(i.b)("p",null,"Let's inspect Wasp project that we created:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"TodoApp/\n\u251c\u2500\u2500 main.wasp # Here goes our Wasp code.\n\u251c\u2500\u2500 ext/      # Here goes our JS/CSS/HTML/... code.\n\u2502   \u2514\u2500\u2500 MainPage.js\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 .wasproot\n")),Object(i.b)("p",null,"We can start with the main (and only) .wasp file, which introduces 3 new concepts:\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#app"}),"app"),",\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#page"}),"page")," and\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#route"}),"route"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'}),'app TodoApp { // Main declaration, defines new web app.\n  title: "Todo app" // Used as a browser tab title.\n}\n\nroute "/" -> page Main // Render page Main on url `/` (default url).\n\npage Main {\n  // We specify that ReactJS implementation of our page can be\n  // found in `ext/MainPage.js` as a default export.\n  component: import Main from "@ext/MainPage.js"\n}\n')),Object(i.b)("p",null,"Let's check out that React component that we referenced in the ",Object(i.b)("inlineCode",{parentName:"p"},"page Main")," declaration:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="ext/MainPage.js"',title:'"ext/MainPage.js"'}),"import React from 'react'\n\nconst MainPage = () => {\n  return <p>Hello world!</p>\n}\nexport default MainPage\n")),Object(i.b)("p",null,'As we can see, this is just a simple functional React component saying "Hello world!".'),Object(i.b)("p",null,"That is all the code right now!\nWasp in the background takes care of everything else needed to define, build and run a web app."),Object(i.b)("p",null,"Now, let's start shaping the app into a Todo App."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"wasp start")," automatically picks up the changes you make and refreshes the app, so keep it running."))),Object(i.b)("h2",{id:"task-entity"},"Task Entity"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#entity"}),"Entities")," are one of the very central concepts in Wasp, and they mainly play the role of data models."),Object(i.b)("p",null,"Since our TodoApp is all about tasks, our first step will be to define Task entity in Wasp:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'}),"// ...\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n")),Object(i.b)("p",null,"Since Wasp delegates database handling to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.prisma.io"}),"Prisma"),", definition of entity comes down to defining ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/data-model/"}),"Prisma model"),", using PSL (Prisma Schema Language) inside the ",Object(i.b)("inlineCode",{parentName:"p"},"{=psl psl=}")," tags."),Object(i.b)("p",null,"After this change, we need to run"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),'$ wasp db migrate-save "added-task-entity"\n')),Object(i.b)("p",null,"to have Prisma propagate the schema changes to the database."),Object(i.b)("h2",{id:"listing-tasks"},"Listing tasks"),Object(i.b)("p",null,"Next, we want to admire our tasks, so let's list them!"),Object(i.b)("h3",{id:"introducing-operations-queries-and-actions"},"Introducing operations (queries and actions)"),Object(i.b)("p",null,"The primary way of interacting with entities in Wasp is via ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#queries-and-actions-aka-operations"}),"operations (queries and actions)"),"."),Object(i.b)("p",null,"Queries are here when we need to fetch/read something, while actions are here when we need to change/update something.\nIn our case, we will write a query, since we are just listing tasks and not modifying anything."),Object(i.b)("p",null,"To list tasks, we will need two things:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Wasp query that fetches all tasks."),Object(i.b)("li",{parentName:"ol"},"React logic that calls query and shows its results.")),Object(i.b)("h3",{id:"wasp-query"},"Wasp query"),Object(i.b)("p",null,"First, let's implement ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks")," ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements#query"}),"query"),".\nIt consists of a declaration in Wasp and implementation in JS (in ",Object(i.b)("inlineCode",{parentName:"p"},"ext/")," directory)."),Object(i.b)("h4",{id:"wasp-declaration"},"Wasp declaration"),Object(i.b)("p",null,"Add this to the ",Object(i.b)("inlineCode",{parentName:"p"},"main.wasp")," file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'}),'// ...\n\nquery getTasks {\n  // We specify that JS implementation of the query (which is an async JS function)\n  // can be found in `ext/queries.js` as named export `getTasks`.\n  fn: import { getTasks } from "@ext/queries.js",\n  // We tell Wasp that this query is doing something with entity `Task`.\n  entities: [Task]\n}\n')),Object(i.b)("h4",{id:"js-implementation"},"JS implementation"),Object(i.b)("p",null,"Next, create a new file ",Object(i.b)("inlineCode",{parentName:"p"},"ext/queries.js")," and define the JS function that we just announced in the declaration above:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="ext/queries.js"',title:'"ext/queries.js"'}),"export const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n")),Object(i.b)("p",null,"Query function parameters:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"args"),": ",Object(i.b)("inlineCode",{parentName:"li"},"object"),", query arguments with which the query is called with."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"context"),": ",Object(i.b)("inlineCode",{parentName:"li"},"object"),", additional stuff provided by Wasp.")),Object(i.b)("p",null,"Since we declared in main.wasp that our query uses entity Task, Wasp injected ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud"}),"Prisma client")," for entity Task as ",Object(i.b)("inlineCode",{parentName:"p"},"context.entities.Task"),", which we then used to fetch all the tasks from the database."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Queries and actions are NodeJS functions and execute on server."))),Object(i.b)("h3",{id:"using-query-in-react"},"Using query in React"),Object(i.b)("p",null,"Finally, let's use the query we just created, ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks"),", in our React component to list the tasks:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:'{3-4,7-16,19-32} title="ext/MainPage.js"',"{3-4,7-16,19-32}":!0,title:'"ext/MainPage.js"'}),"import React from 'react'\n\nimport getTasks from '@wasp/queries/getTasks'\nimport { useQuery } from '@wasp/queries'\n\nconst MainPage = () => {\n  const { data: tasks, isFetching, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isFetching && 'Fetching...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst Task = (props) => (\n  <div>\n    <input\n      type='checkbox' id={props.task.id}\n      checked={props.task.isDone} readonly\n    />\n    {props.task.description}\n  </div>\n)\n\nconst TasksList = (props) => {\n  if (!props.tasks?.length) return 'No tasks'\n  return props.tasks.map((task, idx) => <Task task={task} key={idx} />)\n}\n\nexport default MainPage\n")),Object(i.b)("p",null,"All of this is just regular React, except for the two special ",Object(i.b)("inlineCode",{parentName:"p"},"@wasp")," imports:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"import getTasks from '@wasp/queries/getTasks'"),": provides us with our freshly defined Wasp query."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"import { useQuery } from '@wasp/queries'"),": provides us with Wasp's ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/language/basic-elements#usequery"}),"useQuery")," React hook which is actually just a thin wrapper over ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/tannerlinsley/react-query"}),"react-query")," ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://react-query.tanstack.com/docs/guides/queries"}),"useQuery")," hook, behaving very similarly while offering some extra integration with Wasp.")),Object(i.b)("p",null,"While we could call query directly as ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks()"),", calling it as ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery(getTasks)")," gives us the reactivity (React component gets re-rendered if result of the query changes)."),Object(i.b)("p",null,'With these changes, you should be seeing text "No tasks" on the screen.'),Object(i.b)("img",{alt:"Todo App - No Tasks",src:Object(s.a)("img/todo-app-no-tasks.png"),style:{border:"1px solid black"}}),Object(i.b)("p",null,"Next, let's create some tasks!"),Object(i.b)("h2",{id:"creating-new-tasks"},"Creating new tasks"),Object(i.b)("p",null,"To enable creation of new tasks, we will need two things:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Wasp action that creates a new task."),Object(i.b)("li",{parentName:"ol"},"React form that calls that action.")),Object(i.b)("h3",{id:"wasp-action"},"Wasp action"),Object(i.b)("p",null,"Creating an action is very similar to creating a query."),Object(i.b)("p",null,"First we declare the action in Wasp:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'}),'// ...\n\naction createTask {\n  fn: import { createTask } from "@ext/actions.js",\n  entities: [Task]\n}\n')),Object(i.b)("p",null,"Next, we define a JS function for that action:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="ext/actions.js"',title:'"ext/actions.js"'}),"export const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description }\n  })\n}\n")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We put JS function in new file ",Object(i.b)("inlineCode",{parentName:"p"},"ext/actions.js"),", but we could have put it anywhere we wanted, there are no limitations here, as long as the import statement in Wasp file is correct and it is inside the ",Object(i.b)("inlineCode",{parentName:"p"},"ext/")," dir."))),Object(i.b)("h3",{id:"react-form"},"React form"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:'{1,5,12,37-61} title="ext/MainPage.js"',"{1,5,12,37-61}":!0,title:'"ext/MainPage.js"'}),"import React, { useState } from 'react'\n\nimport { useQuery } from '@wasp/queries'\nimport getTasks from '@wasp/queries/getTasks'\nimport createTask from '@wasp/actions/createTask'\n\nconst MainPage = () => {\n  const { data: tasks, isFetching, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isFetching && 'Fetching...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst Task = (props) => {\n  return (\n    <div>\n      <input\n        type='checkbox' id={props.task.id}\n        checked={props.task.isDone} readonly\n      />\n      {props.task.description}\n    </div>\n  )\n}\n\nconst TasksList = (props) => {\n  if (!props.tasks?.length) return 'No tasks'\n  return props.tasks.map((task, idx) => <Task task={task} key={idx} />)\n}\n\nconst NewTaskForm = (props) => {\n  const defaultDescription = ''\n  const [description, setDescription] = useState(defaultDescription)\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      await createTask({ description })\n      setDescription(defaultDescription)\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n      />\n      <input type='submit' value='Create task' />\n    </form>\n  )\n}\n\nexport default MainPage\n")),Object(i.b)("p",null,"Here we call our action directly (no hooks), since we don't need any reactivity. The rest is just regular React code."),Object(i.b)("p",null,'This is it! Try creating a "Build a Todo App in Wasp" task and you will see it appear in the list below.'),Object(i.b)("img",{alt:"Todo App - creating new task",src:Object(s.a)("img/todo-app-new-task.png"),style:{border:"1px solid black"}}),Object(i.b)("h3",{id:"side-note-automatic-invalidationupdating-of-queries"},"Side note: Automatic invalidation/updating of queries"),Object(i.b)("p",null,"You will notice that when you create a new task, list of tasks is automatically updated with that new task, although we have written no code to take care of that! Normally, you would have to do this explicitly, e.g. with react-query you would invalidate the ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks")," query via its key, or would call its ",Object(i.b)("inlineCode",{parentName:"p"},"refetch()")," method."),Object(i.b)("p",null,"The reason why ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks")," query automatically updates when ",Object(i.b)("inlineCode",{parentName:"p"},"createTask")," action is executed is because Wasp is aware that both of them are working with ",Object(i.b)("inlineCode",{parentName:"p"},"Task")," entity, and therefore assumes that action that operates on ",Object(i.b)("inlineCode",{parentName:"p"},"Task")," (in this case ",Object(i.b)("inlineCode",{parentName:"p"},"createTask"),") might have changed the result of ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks")," query. Therefore, in the background, Wasp nudges ",Object(i.b)("inlineCode",{parentName:"p"},"getTasks")," query to update. This means that ",Object(i.b)("strong",{parentName:"p"},"out of the box, Wasp will make sure that all your queries that deal with entities are always in sync with any changes that the actions might have done"),"."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"While this kind of approach to automatic invalidation of queries is very convenient, it is in some situations wasteful and could become a performance bottleneck as an app grows. In that case, you will be able to override this default behaviour and instead provide more detailed (and performant) instructions on how action should affect queries. This is not yet implemented, but is something we plan to do and you can track the progress ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/wasp-lang/wasp/issues/63"}),"here")," (or even contribute!)."))),Object(i.b)("h2",{id:"updating-tasks"},"Updating tasks"),Object(i.b)("p",null,"Todo app isn't done if you can't mark a task as done!"),Object(i.b)("p",null,"For that, we will need to do two things:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Implement Wasp action that updates the task."),Object(i.b)("li",{parentName:"ol"},"Modify React component so it calls that action.")),Object(i.b)("p",null,"We declare Wasp action:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'}),'// ...\n\naction updateTask {\n  fn: import { updateTask } from "@ext/actions.js",\n  entities: [Task]\n}\n')),Object(i.b)("p",null,"We define JS implementation of Wasp action in ",Object(i.b)("inlineCode",{parentName:"p"},"ext/actions.js")," file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="ext/actions.js"',title:'"ext/actions.js"'}),"// ...\n\nexport const updateTask = async (args, context) => {\n  return context.entities.Task.update({\n    where: { id: args.taskId },\n    data: {\n      isDone: args.data.isDone\n    }\n  })\n}\n")),Object(i.b)("p",null,"And we update React component:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:'{2,7-16,23} title="ext/MainPage.js"',"{2,7-16,23}":!0,title:'"ext/MainPage.js"'}),"// ...\nimport updateTask from '@wasp/actions/updateTask'\n\n// ...\n\nconst Task = (props) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        taskId: props.task.id,\n        data: { isDone: event.target.checked }\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type='checkbox' id={props.task.id}\n        checked={props.task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {props.task.description}\n    </div>\n  )\n}\n// ...\n")),Object(i.b)("p",null,"Awesome! We can now tick this task as done ;)."),Object(i.b)("h2",{id:"summary"},"Summary"),Object(i.b)("p",null,"In this tutorial you learned how to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Create a new Wasp project and run it."),Object(i.b)("li",{parentName:"ul"},"Import and use React code in Wasp project."),Object(i.b)("li",{parentName:"ul"},"Define an entity."),Object(i.b)("li",{parentName:"ul"},"Define and use queries and actions.")),Object(i.b)("p",null,"To deepen your knowledge on any of these topics, check ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language/basic-elements"}),"Basic Elements"),"."),Object(i.b)("p",null,"To continue building our Todo App project while learning advanced concepts, proceed to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"tutorials/todo-app/2-dependencies-and-auth.md"}),"Todo app: Dependencies and Auth"),"."))}l.isMDXComponent=!0},76:function(e,t,a){"use strict";var n=a(0),i=a(20);t.a=function(){const e=Object(n.useContext)(i.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},77:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=i.a.createContext({}),l=function(e){var t=i.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=l(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(a),u=n,m=b["".concat(r,".").concat(u)]||b[u]||d[u]||s;return a?i.a.createElement(m,o(o({ref:t},p),{},{components:a})):i.a.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,r=new Array(s);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var p=2;p<s;p++)r[p]=a[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},79:function(e,t,a){"use strict";a.d(t,"b",(function(){return s})),a.d(t,"a",(function(){return r}));var n=a(76),i=a(80);function s(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(n.a)();return{withBaseUrl:(a,n)=>function(e,t,a,{forcePrependBaseUrl:n=!1,absolute:s=!1}={}){if(!a)return a;if(a.startsWith("#"))return a;if(Object(i.b)(a))return a;if(n)return t+a;const r=a.startsWith(t)?a:t+a.replace(/^\//,"");return s?e+r:r}(t,e,a,n)}}function r(e,t={}){const{withBaseUrl:a}=s();return a(e,t)}},80:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return i}))}}]);